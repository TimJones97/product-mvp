### Force redeploy
name: "development pipeline"
on:
  push:
     branches-ignore:
        - "*"
env:
  # Build
  NODE_ENV: development
  RUNTIME_ENV: dev

  # argo-autopilot vars
  APP_NAME: buildcities_mvp

  # Container Registry
  CONTAINER_REGISTRY_HOSTNAME: ghcr.io
  CONTAINER_REGISTRY_USERNAME: buildcities
  CONTAINER_REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  CONTAINER_REGISTRY_REPOSITORY: buildcities
  CONTAINER_REGISTRY_IMAGE_PREFIX: buildmvp

  # Repository
  GIT_DEPLOY_REPOSITORY_NAME: buildcities/git-ops
  GIT_DEPLOY_REPOSITORY_BRANCH: main
  GIT_DEPLOY_REPOSITORY_AUTHOR_NAME: buildcities
  GIT_DEPLOY_REPOSITORY_AUTHOR_EMAIL: rollymaduk@gmail.com
  GIT_DEPLOY_REPOSITORY_AUTHOR_TOKEN: ${{ secrets.ACCESS_TOKEN }}

jobs:
  ### test
  #test:
  #  uses: buildcities/composite-workflows/.github/workflows/test.yml@main
  #  secrets:
  #    token: ${{ github.token }}
  ### build
  #build:
  #  needs: test
  #  uses: buildcities/composite-workflows/.github/workflows/build.yml@main
  #  with:
  #    registry-user: buildcities
  #    registry-host: ghcr.io
  #    registry-repo: product-mvp
  #  secrets:
  #    token: ${{ github.token }}
  deploy:
    name: Deploy
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    strategy:
      max-parallel: 1
      fail-fast: true
      matrix:
        platform: [api, web]
        include:
          - platform: api
          - platform: web

    steps:
      # Checkout deployment repository
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          submodules: recursive
          repository: ${{ env.GIT_DEPLOY_REPOSITORY_NAME }}
          ref: ${{ env.GIT_DEPLOY_REPOSITORY_BRANCH }}
          token: ${{ env.GIT_DEPLOY_REPOSITORY_AUTHOR_TOKEN }}

      # Login to Docker Container Registry
      - name: Docker login
        uses: docker/login-action@v1
        with:
          registry: ${{ env.CONTAINER_REGISTRY_HOSTNAME }}
          username: ${{ env.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ env.CONTAINER_REGISTRY_PASSWORD }}

      # Save these Docker credentials to the deployment repository
      # It will be used in Kustomize to generate a Kubernetes secret for the container registry
      - name: Save Container Registry credentials
        run: |
          cat $HOME/.docker/config.json |                                         \
            jq 'del(.credsStore) | del(.HttpHeaders)' >                           \
            apps/${NODE_ENV}/overlays/${APP_NAME}/secrets/.dockerconfigjson
      # Setup Kustomize
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v1

      # Use Kustomize to update the image placeholder in the Kustomize manifest file
      - name: Set Docker image
        run: |
          cd apps/${NODE_ENV}/overlays/${APP_NAME}
          kustomize edit set image placeholder/${{ matrix.platform }}=${CONTAINER_REGISTRY_HOSTNAME}/${CONTAINER_REGISTRY_REPOSITORY}/${CONTAINER_REGISTRY_IMAGE_PREFIX}-${{ matrix.platform }}-${{ env.RUNTIME_ENV }}:${GITHUB_SHA}
          cat kustomization.yml
      # For debugging purposes, create a latest.yaml file
      - name: Generate Kubernetes latest manifest
        run: |
          cd apps/${NODE_ENV}/overlays/${APP_NAME}
          kustomize build -o latest.yaml
          printf '%s\n%s\n' "# Generated with Kustomize at $(date)" "$(cat latest.yaml)" > latest.yaml
      # Commit our changes (e.g. the updated image tag generated by Kustomize)
      - name: Commit and push changes
        uses: EndBug/add-and-commit@v6
        with:
          author_name: ${{ env.GIT_DEPLOY_REPOSITORY_AUTHOR_NAME }}
          author_email: ${{ env.GIT_DEPLOY_REPOSITORY_AUTHOR_EMAIL }}
          branch: ${{ env.GIT_DEPLOY_REPOSITORY_BRANCH }}
          message: "[ci] Deployed ${{ github.repository }}@${{ github.sha }}: ${{ github.event.head_commit.message }}"
          pull_strategy: "--no-ff"
          push: true
          token: ${{ env.GIT_DEPLOY_REPOSITORY_AUTHOR_TOKEN }}
